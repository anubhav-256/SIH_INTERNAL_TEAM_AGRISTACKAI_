#define BLYNK_TEMPLATE_ID   "TMPL3FX_ajJKB"
#define BLYNK_TEMPLATE_NAME "SIH 2025"
#define BLYNK_AUTH_TOKEN    "2g05juVTaeOQz9tPNvj4xVuNmxihGs9k"

#include <WiFi.h>
#include <WiFiClient.h>
#include <BlynkSimpleEsp32.h>
#include "DHT.h"

#define DHTPIN     26
#define DHTTYPE    DHT22
#define MQ135_PIN  36

// ---------- Control pins ----------
#define CONDENSER_RELAY  27   // Relay or MOSFET controlling condenser coils
#define HUMIDIFIER_RELAY 25   // Relay or MOSFET controlling humidifier
// -----------------------------------

// ---- Virtual pins for status ----
#define VPIN_CONDENSER_STATUS  V7
#define VPIN_HUMIDIFIER_STATUS V8
// ----------------------------------

// Wi-Fi credentials
const char* ssid = "Wokwi-GUEST";
const char* pass = "";

DHT dht(DHTPIN, DHTTYPE);

// ---------- message-saving settings ----------
const unsigned long UPDATE_INTERVAL = 15000UL; // 15 s between checks
const float TEMP_THRESHOLD = 0.25;             // °C change before send
const float HUM_THRESHOLD  = 1.0;              // %RH change before send
const int   MQ_THRESHOLD   = 50;               // ADC change before send
// ---------------------------------------------

// previous values to compare
float lastTemp = NAN;
float lastHum  = NAN;
int   lastMQ   = -1;

// variables to remember last relay states
int condenserState  = 0; // 0 = OFF, 1 = ON
int humidifierState = 0;

void setup() {
  Serial.begin(115200);
  Blynk.begin(BLYNK_AUTH_TOKEN, ssid, pass);
  dht.begin();

  // set relay pins as outputs
  pinMode(CONDENSER_RELAY, OUTPUT);
  pinMode(HUMIDIFIER_RELAY, OUTPUT);

  // make sure both are OFF initially
  digitalWrite(CONDENSER_RELAY, LOW);
  digitalWrite(HUMIDIFIER_RELAY, LOW);

  // send initial status to Blynk
  Blynk.virtualWrite(VPIN_CONDENSER_STATUS, condenserState);
  Blynk.virtualWrite(VPIN_HUMIDIFIER_STATUS, humidifierState);
}

void loop() {
  Blynk.run();

  static unsigned long lastUpdate = 0;
  if (millis() - lastUpdate >= UPDATE_INTERVAL) {
    lastUpdate = millis();

    float temp = dht.readTemperature();
    float hum  = dht.readHumidity();
    int   mq   = analogRead(MQ135_PIN); // 0–4095 raw ADC value

    Serial.printf("Temp: %.1f°C  Hum: %.1f%%  MQ135: %d\n",
                  temp, hum, mq);

    // --- Send to Blynk only if value changed enough ---
    if (!isnan(temp) && (isnan(lastTemp) || fabs(temp - lastTemp) > TEMP_THRESHOLD)) {
      Blynk.virtualWrite(V3, temp);
      lastTemp = temp;
    }

    if (!isnan(hum) && (isnan(lastHum) || fabs(hum - lastHum) > HUM_THRESHOLD)) {
      Blynk.virtualWrite(V4, hum);
      lastHum = hum;
    }

    if (lastMQ < 0 || abs(mq - lastMQ) > MQ_THRESHOLD) {
      Blynk.virtualWrite(V5, mq);
      lastMQ = mq;
    }

    // ---------- Automatic Controls ----------

    // Condenser coil cooling: maintain 25–28 °C
    if (!isnan(temp)) {
      if (temp > 28.0 && condenserState == 0) {
        digitalWrite(CONDENSER_RELAY, HIGH); // Turn ON cooling
        condenserState = 1;
        Blynk.virtualWrite(VPIN_CONDENSER_STATUS, 1);
      } else if (temp < 25.0 && condenserState == 1) {
        digitalWrite(CONDENSER_RELAY, LOW);  // Turn OFF cooling
        condenserState = 0;
        Blynk.virtualWrite(VPIN_CONDENSER_STATUS, 0);
      }
    }

    // Humidifier: maintain 55–65 % RH
    if (!isnan(hum)) {
      if (hum < 55.0 && humidifierState == 0) {
        digitalWrite(HUMIDIFIER_RELAY, HIGH); // Turn ON humidifier
        humidifierState = 1;
        Blynk.virtualWrite(VPIN_HUMIDIFIER_STATUS, 1);
      } else if (hum > 65.0 && humidifierState == 1) {
        digitalWrite(HUMIDIFIER_RELAY, LOW);  // Turn OFF humidifier
        humidifierState = 0;
        Blynk.virtualWrite(VPIN_HUMIDIFIER_STATUS, 0);
      }
    }
  }
}
